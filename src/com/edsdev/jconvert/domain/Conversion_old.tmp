package com.edsdev.jconvert.domain;

public abstract class Conversion {

    private String fromUnit;

    private String fromUnitAbbr;

    private String toUnit;

    private String toUnitAbbr;

    private boolean isFraction = false;

    private double fromToFactor = 1;

    private long fromToTopFactor = 1;

    private long fromToBottomFactor = 1;

    private double fromToOffset = 0;

    private int generationAge = 0;

    public Conversion() {
        super();
    }

    public Conversion(String fromUnit, String fromUnitAbbr, String toUnit, String toUnitAbbr, String fromToFactor,
            double fromToOffset) {
        this();
        this.fromUnit = fromUnit;
        this.fromUnitAbbr = fromUnitAbbr;
        this.toUnit = toUnit;
        this.toUnitAbbr = toUnitAbbr;
        this.fromToOffset = fromToOffset;

        int pos = fromToFactor.indexOf("/");
        if (pos > 0) {
            String top = fromToFactor.substring(0, pos);
            String bottom = fromToFactor.substring(pos + 1);
            if (isWholeNumber(top) && isWholeNumber(bottom)) {
                isFraction = true;
                fromToTopFactor = Long.parseLong(top);
                fromToBottomFactor = Long.parseLong(bottom);
            } else {
                this.fromToFactor = Double.parseDouble(top)/Double.parseDouble(bottom);
            }
        } else if (isWholeNumber(fromToFactor)) {
            //representing a whole number like this helps preserve fractions - bit of a trick
            isFraction = true;
            fromToTopFactor = getLong(fromToFactor);
            fromToBottomFactor = 1;
        } else {
            this.fromToFactor = Double.parseDouble(fromToFactor);
        }
    }

    private boolean isWholeNumber(String value) {
        //quick check - if longer than 19 chars long will not hold
        if (value.length() > 19) {
            return false;
        }
        int pos = value.indexOf(".");

        //look after decimal for only zeors like 45.000
        if (pos > 0) {
            for (int i = pos + 1; i < value.length(); i++) {
                if (!"0".equals(value.subSequence(i, i + 1))) {
                    return false;
                }
            }
        }

        //one last test since anything over 9,223,372,036,854,775,808 will 
        //succeed, but will not fit in a long 
        try {
            Long.parseLong(value);
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    private long getLong(String value) {
        //simply extracts long out of string, but also handles it when there 
        //is decimals - should use isWhole number to make sure, because this 
        //will throw an exception if not prefect
        int pos = value.indexOf(".");
        if (pos < 0) {
            return Long.parseLong(value);
        }
        return Long.parseLong(value.substring(0, pos));
    }

    public static void main(String[] args) {
        Conversion conversion = new Conversion();
        conversion.setFromUnit("Celsius");
        conversion.setFromUnitAbbr("C");
        conversion.setToUnit("Fahrenheit");
        conversion.setToUnitAbbr("F");
        conversion.setFromToFactor(1.8);
        conversion.setFromToOffset(32);

        System.out.println(conversion.convertValue(17, conversion.getFromUnit()));
        System.out.println(conversion.convertValue(62.6, conversion.getToUnit()));

        System.out.println(conversion.isWholeNumber("345"));
        System.out.println(conversion.isWholeNumber("345."));
        System.out.println(conversion.isWholeNumber("345.5"));
        System.out.println(conversion.isWholeNumber("345.567"));
        System.out.println(conversion.isWholeNumber("345.0006"));
        System.out.println(conversion.isWholeNumber("345.000"));

    }

    public int hashCode() {
        return fromUnit.hashCode() + toUnit.hashCode();
    }

    public String toString() {
        return this.hashCode() + ": " + fromUnit + ";" + toUnit + ";" + fromToFactor + ";" + fromToOffset;
    }

    public boolean equals(Object obj) {
        if (obj instanceof Conversion) {
            Conversion compare = (Conversion) obj;
            if (!areEqual(compare.getFromUnit(), fromUnit)) {
                return false;
            }
            if (!areEqual(compare.getFromUnitAbbr(), fromUnitAbbr)) {
                return false;
            }
            if (!areEqual(compare.getToUnit(), toUnit)) {
                return false;
            }
            if (!areEqual(compare.getToUnitAbbr(), toUnitAbbr)) {
                return false;
            }
            return true;

        }
        return false;
    }

    private boolean areEqual(Object one, Object two) {
        if (one == null && two == null) {
            return true;
        }
        if (one == null) {
            return false;
        }
        if (two == null) {
            return false;
        }
        return one.equals(two);
    }

    /**
     * @param value
     *            double value you want to convert
     * @param fromUnit
     *            Unit that you want to convert from
     * @return answer
     * 
     * If the fromUnit does not match the classes from unit, then it is assumed that you are converting the other way
     * ex. System.out.println(conversion.convertValue(17, conversion.getFromUnit()));
     * 
     */
    public double convertValue(double value, String pFromUnit) {
        if (pFromUnit.equals(this.getFromUnit())) {
            if (isFraction) {
                return getRoundedResult(((value * fromToTopFactor) / fromToBottomFactor) + fromToOffset);
            }
            return getRoundedResult((value * fromToFactor) + fromToOffset);
        } else {
            if (isFraction) {
                return getRoundedResult(((value - fromToOffset) * fromToBottomFactor) / fromToTopFactor);
            }
            return getRoundedResult((value - fromToOffset) / fromToFactor);
        }
    }

    private double getRoundedResult(double result) {
        return result;
        //		BigDecimal bigResult = new BigDecimal(result);
        //		String resultString = new Double(result).toString();
        //		int scale = resultString.substring(resultString.indexOf(".") + 1).length() - ( 1 + this.getGenerationAge());
        //		BigDecimal rv = bigResult.setScale(scale, BigDecimal.ROUND_HALF_UP);
        //
        //		return rv.doubleValue();
    }

    public Double convertValue(double value, String pFromUnit, String pTtoUnit) {
        if (this.getFromUnit().equals(pFromUnit) && this.getToUnit().equals(pTtoUnit)) {
            return new Double(convertValue(value, pFromUnit));
        }
        if (this.getFromUnit().equals(pTtoUnit) && this.getToUnit().equals(pFromUnit)) {
            return new Double(convertValue(value, pFromUnit));
        }
        return null;
    }

    public String getConversionPartner(String unit) {
        if (this.getFromUnit().equals(unit)) {
            return this.getToUnit();
        } else if (this.getToUnit().equals(unit)) {
            return this.getFromUnit();
        }
        return null;
    }

    public String multiply(Conversion byConversion) {
        String rv = "1";
        if (this.isFraction() && byConversion.isFraction()) {
            rv = (this.getFromToTopFactor() * byConversion.getFromToTopFactor()) + "/"
                    + (this.getFromToBottomFactor() * byConversion.getFromToBottomFactor());
        } else if (this.isFraction()) {
            rv = ((this.getFromToTopFactor() * byConversion.getFromToFactor()) / this.getFromToBottomFactor()) + "";
        } else if (byConversion.isFraction()) {
            rv = (this.getFromToFactor() * byConversion.getFromToTopFactor()) / byConversion.getFromToBottomFactor()
                    + "";
        } else {
            rv = (this.getFromToFactor() * byConversion.getFromToFactor()) + "";
        }
        return rv;
    }

    public String divide(Conversion byConversion) {
        String rv = "1";
        if (this.isFraction() && byConversion.isFraction()) {
            rv = (this.getFromToTopFactor() * byConversion.getFromToBottomFactor()) + "/"
                    + (this.getFromToBottomFactor() * byConversion.getFromToTopFactor());
        } else if (this.isFraction()) {
            rv = (this.getFromToBottomFactor() * byConversion.getFromToFactor()) / this.getFromToTopFactor() + "";
        } else if (byConversion.isFraction()) {
            rv = (this.getFromToFactor() * byConversion.getFromToBottomFactor()) / byConversion.getFromToTopFactor()
                    + "";
        } else {
            rv = (this.getFromToFactor() / byConversion.getFromToFactor()) + "";
        }
        return rv;
    }

    public double getFromToFactor() {
        return fromToFactor;
    }

    public void setFromToFactor(double fromToFactor) {
        this.fromToFactor = fromToFactor;
    }

    public double getFromToOffset() {
        return fromToOffset;
    }

    public void setFromToOffset(double fromToOffset) {
        this.fromToOffset = fromToOffset;
    }

    public String getFromUnit() {
        return fromUnit;
    }

    public void setFromUnit(String fromUnit) {
        this.fromUnit = fromUnit;
    }

    public String getFromUnitAbbr() {
        return fromUnitAbbr;
    }

    public void setFromUnitAbbr(String fromUnitAbbr) {
        this.fromUnitAbbr = fromUnitAbbr;
    }

    public String getToUnit() {
        return toUnit;
    }

    public void setToUnit(String toUnit) {
        this.toUnit = toUnit;
    }

    public String getToUnitAbbr() {
        return toUnitAbbr;
    }

    public void setToUnitAbbr(String toUnitAbbr) {
        this.toUnitAbbr = toUnitAbbr;
    }

    public int getGenerationAge() {
        return generationAge;
    }

    public void setGenerationAge(int generationAge) {
        this.generationAge = generationAge;
    }

    public long getFromToBottomFactor() {
        return fromToBottomFactor;
    }

    public void setFromToBottomFactor(long fromToBottomFactor) {
        this.fromToBottomFactor = fromToBottomFactor;
    }

    public long getFromToTopFactor() {
        return fromToTopFactor;
    }

    public void setFromToTopFactor(long fromToTopFactor) {
        this.fromToTopFactor = fromToTopFactor;
    }

    public boolean isFraction() {
        return isFraction;
    }

    public void setFraction(boolean isFraction) {
        this.isFraction = isFraction;
    }
}
